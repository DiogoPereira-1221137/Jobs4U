@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

title "US1015 - As Customer Manager, I want to execute the process of verification of requirements of applications for a job opening." Sequence Diagram
'hide footbox
actor "Customer Manager" as CM
participant ":ExecuteVerificationRequirementsJobOpeningUI" as UI <<presentation>>
control ":ExecuteVerificationRequirementsJobOpeningController" as CTRL <<application>>
participant ":JobOpeningRepository" as JobOpeningRepository  <<repository>>
participant ":JobApplicationRepository" as JobApplicationRepository  <<repository>>
participant "jarClass :jarClass" as JAR <<requirementsInterface>>
participant ":JobOpening" as JobOpening <<domain>>
participant ":JobApplication" as JobApplication <<domain>>
participant ":ApplicationFile" as ApplicationFile <<domain>>
participant ":Notification" as Notification <<domain>>
participant ":NotificationRepository" as NotificationRepository  <<repository>>

activate CM

    CM -> UI : asks to verify the requirements for a job opening

    activate UI

        UI -> CTRL** : create


        UI -> CTRL : allActiveJobOpeningsByCustomerManager()

    activate CTRL
               CTRL-> JobOpeningRepository : allActiveJobOpeningsByCustomerManager()

               activate JobOpeningRepository

               JobOpeningRepository--> CTRL : jobOpeningList

               deactivate JobOpeningRepository

               CTRL--> UI : jobOpeningList

           deactivate CTRL




        UI --> CM : shows list of all the job openings and asks to select one

    deactivate UI

    CM -> UI : selects a job opening
    activate UI

        UI->CTRL : allWaitingApplicationsByJobOpening(jobOpeningSelected)
        activate CTRL

        CTRL-> JobApplicationRepository : allWaitingApplicationsByJobOpening(jobOpeningSelected))

                activate JobApplicationRepository

               JobApplicationRepository--> CTRL : jobApplicationsList

               deactivate JobApplicationRepository

               CTRL->UI: jobApplicationsList

               deactivate CTRL

        loop job application

        UI->CTRL: filePathsRequirements(jobApplication)
        activate CTRL

        CTRL-> JobApplication : filePathsRequirements()

        activate JobApplication
        JobApplication--> CTRL: reqPaths
        deactivate JobApplication

         CTRL->UI: files

        deactivate CTRL

        alt reqPaths != 0
        loop file

        UI->CTRL: verifyRequirements(file, jobApplication, jobOpeningSelected)
                activate CTRL

                    CTRL -> JAR** : create
                    CTRL -> JAR: verifyRequirements(file)
                    activate JAR
                    JAR --> CTRL : true
                    deactivate JAR

                    CTRL->JobApplication:ApproveApplication()

                    CTRL-->UI : valid

                    deactivate CTRL


                    UI->CTRL: notifyCandidate(message, customerManagerEmail, jobOpeningSelected)
                    activate CTRL

                    CTRL->Notification : notification(candidateEmail, customerManagerEmail, title, subject , notificationMessage)

                    activate Notification

                    Notification-->CTRL : notification

                    deactivate Notification


                    CTRL->NotificationRepository : save(notification)


                    CTRL-->UI: notificationMessage

                    deactivate CTRL
        end loop
        end alt

       end loop





        deactivate CTRL

        UI --> CM : shows notificationMessage and Application info

    deactivate UI



    deactivate UI
deactivate CM

@enduml