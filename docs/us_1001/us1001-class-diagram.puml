@startuml

title "US1001 - Register a Customer" Class Diagram

class RegisterCustomerController{
- userSvc : UserManagementService

+ registerCustomer(final String email, final String password, final String firstName,
                                        final String lastName, final Code code, final Address address, final Set<Role> roles) : SystemUser
+ addUser(final String email, final String password, final String firstName,
                                final String lastName, final Set<Role> roles, final Calendar createdOn) : SystemUser
+ generatePassword() : String

}

class RegisterCustomerUI{
}

class UserManagementService{
- userRepository : UserRepository
- encoder : PasswordEncoder
- policy : PasswordPolicy

+registerNewUser(final String username, final String rawPassword, final String firstName, \nfinal String lastName, final String email, final Set<Role> roles,
final Calendar createdOn) : SystemUser
+registerNewUser(final String username, final String rawPassword, final String firstName,
 final String lastName, final String email, final Set<Role> roles) : SystemUser
+ registerUser(final Username username, final Password password, final Name name,
final EmailAddress email, final Set<Role> roles) : SystemUser
+ activeUsers() : Iterable<SystemUser>
+ deactivatedUsers() : Iterable<SystemUser>
+ activateUser(final SystemUser user) : SystemUser
+ deactivateUser(final SystemUser user) : SystemUser
+ allUsers() : Iterable<SystemUser>

}


class Address{
-street : String
-city : String
-state : String
-country : String
-zipcode : String

-validateZipcode(zipcode) : Boolean
}

class Customer{
-systemUser : SystemUser
-code : Code
-address : Address
-customerManager : SystemUser

+user() : SystemUser
+getID() : Code
+address() : Address
+customerManagerAssociated() : SystemUser
}

class EmailAddress{
-email : String

}

class Name{
-firstName : String
-lastName : String
+firstName() : String
+lastName() : String
}

class Code{
-code : String
+getCode() : String
}


class SystemUser{
-name : Name
-email : EmailAddress

+email() : EmailAddress
+name() : Name
}


class PersistenceContext{
+repositories()
}

interface RepositoryFactory{
customers()
customers(TransactionalContext tx)
users()
users(TransactionalContext autoTx)
}


interface UserRepository{
findByActive(boolean active)
save(SystemUser)
}



interface CustomerRepository{
findByCode(Code code)
save(Customer)
}


class EventPublisher{
    dispatcher
}

class RegisterCustomerEvent{
   -theRegisterRequest : SystemUser
   -code : Code
   -address : Address
   -customerManager : SystemUser

   +name() : Name
   +code() : Code
   +email() : String
   +address() : Address
   +customerManagerAssociated() : SystemUser
   +getTheRegisterRequest() : SystemUser

}


class RegisterCustomerWatchDog{
    + onEvent(domainevent)
}

class RegisterCustomerOnEventController{
    +registerCustomer(event) : Customer
    +findUser(final RegisterCustomerEvent event) : boolean
}

class DeleteUserEvent{
    - theRegisterRequest : SystemUser
}




RegisterCustomerUI ..> RegisterCustomerController
RegisterCustomerController ..> UserManagementService
Customer --> Address

SystemUser --> EmailAddress
Customer --> Code
Customer --> SystemUser

PersistenceContext --> RepositoryFactory
SystemUser --> Name
 UserManagementService ..> PersistenceContext

 UserManagementService ..> UserRepository
RepositoryFactory  ..> CustomerRepository
RepositoryFactory ..> UserRepository
CustomerRepository --> "*" Customer : stores

RegisterCustomerController --> EventPublisher
EventPublisher "1" -> "*" RegisterCustomerEvent : publishes
EventPublisher "1" --> "*" DeleteUserEvent : publishes


RegisterCustomerWatchDog --> RegisterCustomerOnEventController
RegisterCustomerEvent <- RegisterCustomerWatchDog : watch for event
RegisterCustomerOnEventController ..> CustomerRepository



@enduml