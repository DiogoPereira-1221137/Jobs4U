@startuml
'https://plantuml.com/sequence-diagram

skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor CustomerManager as Actor
participant ":RegisterCustomerUI" as UI <<presentation>>
control ":RegisterCustomerController" as Controller <<application>>
participant "PasswordGenerator" as Password <<application>>

participant "AuthzRegistry" as AR  <<application>>
participant "authz:AuthorizationService" as AUTHS <<application>>
participant ":UserManagementService" as Service <<application>>
participant "PersistenceContext" as Persistence <<persistence>>
participant ":RepositoryFactory" as RepositoryFactory <<persistence>>
participant ":SystemUserBuilder" as UserDomain <<domain>>
participant "event:RegisterCustomerEvent" as RegisterCustomerEvent <<Event>>
participant Dispatcher as Dispatcher <<publisher>>
participant ":RegisterCustomerWatchDog" as RegisterCustomerWatchDog
participant ":RegisterCustomerOnEventController" as RegisterCustomerOnEventController
participant ":Customer" as Domain <<domain>>


participant ":UserRepository" as UserRepository <<repository>>
participant ":CustomerRepository" as Repository <<repository>>


activate Actor
    Actor -> UI : Asks to register a Customer
    activate UI
    UI --> Actor: Ask Customer info
    deactivate UI
    Actor -> UI: First Name, Last Name, E-mail, Address, Code

    activate UI
     UI-> Controller** : create


    UI -> Controller:  generatePassword()
    activate Controller
        Controller -> Password : generatePassword()
        activate Password
        Password --> Controller : password
        deactivate Password

        Controller --> UI: password
        deactivate Controller


         UI -> Controller: registerCustomer(email, password, firstName, lastName, code,  address, roles)
        activate Controller

        Controller->AR : authorizationService()
                     activate AR
                     AR->AUTHS : create()


                    AR-->Controller : authz
                    deactivate AR


        Controller -> Controller : addUser(email, password, firstName, lastName, roles, createdOn);
        activate Controller
        Controller -> Service: registerNewUser(email, password, firstName, lastName, email, roles, createdOn)
        activate Service
        Service->Persistence:repositories()
                    activate Persistence
                    Persistence->RepositoryFactory:deactiveUsers()
                    activate RepositoryFactory
                    RepositoryFactory->UserRepository:create()
                    RepositoryFactory-->Persistence : userRepository
                    deactivate RepositoryFactory
                    Persistence-->Service : userRepository

                    deactivate Persistence

                    deactivate RepositoryFactory

        Service -> UserRepository : save(user)

        Service --> Controller : user
        deactivate Service
        Controller --> Controller
        deactivate Controller

        Controller -> Controller: customerManager = authz.session().get().authenticatedUser() ;


        Controller->RegisterCustomerEvent : new RegisterCustomerEvent(user, code, address,customerManager)

        Controller-> Dispatcher: publish(event)
        activate Dispatcher
        Dispatcher->RegisterCustomerWatchDog : onEvent(event)


        activate RegisterCustomerWatchDog
        RegisterCustomerWatchDog->RegisterCustomerOnEventController : registerCustomer(event)

        activate RegisterCustomerOnEventController
        RegisterCustomerOnEventController -> Domain : new Customer(user, code, address,customerManager)
        RegisterCustomerOnEventController-> Repository: save(customer)

        RegisterCustomerOnEventController--> RegisterCustomerWatchDog : customer

        deactivate RegisterCustomerOnEventController

        RegisterCustomerWatchDog --> Dispatcher : success

        deactivate RegisterCustomerWatchDog

        Dispatcher --> Controller: success

        deactivate Dispatcher







        Controller-->UI: customerManager
    deactivate Controller


        UI-->Actor: Show the information of the customer and their respective customer manager
deactivate UI
@enduml