@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

title "US 3003 - As Customer, I want to be notified in my application when the state (phase) of my job openings changes." Sequence Diagram
'hide footbox




participant ":ClientHandler" as Server <<System>>
control ":NotifyReqController" as CTRL <<application>>
participant ":SerializeUtil" as SerializeUtil <<domain>>

participant ":NotificationService" as Service <<domain>>
participant ":NotificationDTO" as DTO <<domain>>
'participant ":JobApplicationRepository" as Repository <<repository>>
participant ":SerializeUtil" as SerializeUtil <<domain>>
participant ":NotificationRepository" as Rep <<repository>>



-> Server : (tcp) maskAsReadRep

 Server->Server : maskAsReadRep(version, code, data)
 activate Server

   Server->SerializeUtil : deserializeObject()

   activate SerializeUtil

   SerializeUtil--> Server : notificationDTO

   deactivate SerializeUtil

 Server->CTRL: maskAsReadRep(notificationDTO)

 activate CTRL

' CTRL->SerializeUtil : authenticatedUser().email()
'
' activate SerializeUtil
'
' SerializeUtil--> CTRL : email
'
' deactivate SerializeUtil

  CTRL->Service : maskAsReadRep(notificationDTO)

  activate Service

'  Service->Repository : findByCandidate(candidate)
'  activate Repository
'
'  Repository--> Service : jobApplicationsList
'
'  deactivate Repository
'
'  loop each jobApplications
'
'  Service-->Repository: getCandidatesNumberForJobOpening(jobOpening)
'
'    activate Repository
'
'    Repository-->Service: numberOfCandidates
'
'    deactivate Repository
'
'  Service-->DTO: create()
'
'    activate DTO
'
'    DTO-->Service: jobApplciationsDTO
'
'    deactivate DTO
'
'
'
'
'  end loop
'
  Service-->DTO**: create()

  Service->DTO : toObject()

    activate DTO



    DTO-->Service: notif

    deactivate DTO

 Service--> CTRL : notif

  deactivate Service

CTRL-->Server: notif

 deactivate CTRL
'
' note right
'  sugestÃ£o:
'  1. aplicar typed queries
'  2. "reporting" repositories
' end note

'Server->SerializeUtil: serialize(notificationsDTO)
'
'activate SerializeUtil
'
'SerializeUtil-->Server: maskAsReadResp
'
'deactivate SerializeUtil

Server->Rep : save(notif)

 Server-->Server : maskAsReadResp(version, code, data)

deactivate Server
 <-- Server: (tcp) maskAsReadResp





@enduml